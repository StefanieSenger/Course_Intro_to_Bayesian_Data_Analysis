# centering data round mean of trail_id (here only called trial)
df_spacebar <- df_spacebar %>% mutate(c_trial = trial - mean(trial))
df_spacebar
df_spacebar
# centering data round mean of trail_id (here only called trial)
df_spacebar <- df_spacebar %>% mutate(c_trial = trial - mean(trial))
df_spacebar
# centering data round mean of trail_id (here only called trial)
df_spacebar <- df_spacebar %>% mutate(c_trial = trial - mean(trial))
df_spacebar
# centering the predictor
library(dplyr) # for the mutate function
# centering data round mean of trail_id (here only called trial)
df_spacebar <- df_spacebar %>% mutate(c_trial = trial - mean(trial))
df_spacebar
# centering data round mean of trail_id (here only called trial)
data(df_spacebar)
# centering data round mean of trail_id (here only called trial)
data("df_spacebar")
df_spacebar <- df_spacebar %>% mutate(c_trial = trial - mean(trial))
df_spacebar
# centering data round mean of trail_id (here only called trial)
data("df_spacebar")
# first from previous research we define a prior for the intercept a
data('df_pupil_pilot')
df_pupil_pilot$p_size %>% summary()
# based on this let's define the following prior for a:
qnorm(c(.025, .975), mean=1000, sd=500) # extracting qualtiles
# for sigma, we use in uninformative prior:
extraDistr::qtnorm(c(.025, .975), mean=0, sd=1000, a=0) # extracting qualtiles
# for b, which will measure the effect of c_load on the pupil size:
qnorm(c(.025, .975), mean=0, sd=100) # extracting qualtiles
# centering the predictor
library(dplyr) # for the mutate function
data('df_pupil')
(df_pupil <- df_pupil %>% mutate(c_load = load - mean(load))) # mutate creates a new collumn "c_load"
# modeling pupil size as a function of an intercept and a slope:
fit_pupil <- brm(p_size ~ 1 + c_load,
data = df_pupil,
family = gaussian (),
prior = c(
prior(normal(1000, 500), class=Intercept),
prior(normal(0, 1000), class=sigma),
prior(normal(0, 100), class=b, coef=c_load)
))
plot(fit_pupil)
# provides a table with confidence intervals for all the params:
library(rstanarm) # rstanarm not installable here
short_summary(fit_pupil)
# centering data round mean of trail_id (here only called trial)
data("df_spacebar")
df_spacebar <- df_spacebar %>% mutate(c_trial = trial - mean(trial))
df_spacebar
# loading data on reaction times (rt), only one feature
library(bcogsci)
data("df_spacebar")
head(df_spacebar, n=2) # displaying head of df
# centering data round mean of trail_id (here only called trial)
library(bcogsci)
data("df_spacebar")
df_spacebar <- df_spacebar %>% mutate(c_trial = trial - mean(trial))
df_spacebar
# eefefe
df_spacebar <- df_spacebar %>% mutate(rt = rep(1, n()))
# adding a new column of 1s to the "df_spacebar" data frame
df_spacebar <- df_spacebar %>% mutate(rt = rep(1, n()))
df_spacebar
# fitting model
fit_prior_press_trail <- brm(rt ~ 1 + c_load,
data = df_spacebar_ref,
family = lognormal (),
prior = c(
prior(normal(6, 1.5), class=Intercept),
prior(normal(0, 1), class=sigma),
prior(normal(0, 1), class=b, coef=c_trial)
),
sample_prior='only',
control=list(adapt_delta = 0.9)
)
# fitting model
library(brms)
fit_prior_press_trail <- brm(rt ~ 1 + c_load,
data = df_spacebar_ref,
family = lognormal (),
prior = c(
prior(normal(6, 1.5), class=Intercept),
prior(normal(0, 1), class=sigma),
prior(normal(0, 1), class=b, coef=c_trial)
),
sample_prior='only',
control=list(adapt_delta = 0.9)
)
fit_prior_press_trail <- brm(rt ~ 1 + c_load,
data = df_spacebar,
family = lognormal (),
prior = c(
prior(normal(6, 1.5), class=Intercept),
prior(normal(0, 1), class=sigma),
prior(normal(0, 1), class=b, coef=c_trial)
),
sample_prior='only',
control=list(adapt_delta = 0.9)
)
fit_prior_press_trail <- brm(rt ~ 1 + c_trial,
data = df_spacebar,
family = lognormal (),
prior = c(
prior(normal(6, 1.5), class=Intercept),
prior(normal(0, 1), class=sigma),
prior(normal(0, 1), class=b, coef=c_trial)
),
sample_prior='only',
control=list(adapt_delta = 0.9)
)
# centering data round mean of trail_id (here only called trial)
library(bcogsci)
data("df_spacebar")
df_spacebar <- df_spacebar %>% mutate(c_trial = trial - mean(trial))
df_spacebar
# modifying a the rt column, so that's all 1s
df_spacebar_ref <- df_spacebar %>% mutate(rt = rep(1, n()))
df_spacebar_ref
# fitting model
library(brms)
fit_prior_press_trail <- brm(rt ~ 1 + c_trial,
data = df_spacebar_ref,
family = lognormal (),
prior = c(
prior(normal(6, 1.5), class=Intercept),
prior(normal(0, 1), class=sigma),
prior(normal(0, 1), class=b, coef=c_trial)
),
sample_prior='only', # ignores any data from df_spacebar_ref
control=list(adapt_delta = 0.9)
)
# refitting model
fit_prior_press_trail <- brm(rt ~ 1 + c_trial,
data = df_spacebar_ref,
family = lognormal (),
prior = c(
prior(normal(6, 1.5), class=Intercept),
prior(normal(0, 1), class=sigma),
prior(normal(0, .01), class=b, coef=c_trial)
),
sample_prior='only', # ignores any data from df_spacebar_ref
control=list(adapt_delta = 0.9)
)
# looking at statistics from the prior predictive distributions:
median_diff <- function(x){median(x-lag(x), na.rm=TRUE)}
# looking at statistics from the prior predictive distributions:
median_diff <- function(x){median(x-lag(x), na.rm=TRUE)}
pp_check(fit_prior_press_trail,
type="stat",
stat="median_diff",
prefix="ppd", # show only prior predictive distributions
binwidth=500 + coord_cartesian(ylim=c(0,50)) + theme_bw()) # binwidth and cut top of plot
library(ggplot2)
pp_check(fit_prior_press_trail,
type="stat",
stat="median_diff",
prefix="ppd", # show only prior predictive distributions
binwidth=500 + coord_cartesian(ylim=c(0,50)) + theme_bw()) # binwidth and cut top of plot
pp_check(fit_prior_press_trail,
type="stat",
stat="median_diff",
prefix="ppd", # show only prior predictive distributions
binwidth=500 + coord_cartesian(ylim=c(0,50)) + theme_bw()) # binwidth and cut top of plot
+ coord_cartesian(ylim=c(0,50)) + theme_bw() # binwidth and cut top of plot
pp_check(fit_prior_press_trail,
type="stat",
stat="median_diff",
prefix="ppd", # show only prior predictive distributions
binwidth=500) +
coord_cartesian(ylim=c(0,50)) + theme_bw() # binwidth and cut top of plot
# first from previous research we define a prior for the intercept a
data('df_pupil_pilot')
df_pupil_pilot$p_size %>% summary()
# based on this let's define the following prior for a:
qnorm(c(.025, .975), mean=1000, sd=500) # extracting qualtiles
# for sigma, we use in uninformative prior:
extraDistr::qtnorm(c(.025, .975), mean=0, sd=1000, a=0) # extracting qualtiles
# for b, which will measure the effect of c_load on the pupil size:
qnorm(c(.025, .975), mean=0, sd=100) # extracting qualtiles
# centering the predictor
library(dplyr) # for the mutate function
data('df_pupil')
(df_pupil <- df_pupil %>% mutate(c_load = load - mean(load))) # mutate creates a new collumn "c_load"
# modeling pupil size as a function of an intercept and a slope:
library(brms)
fit_pupil <- brm(p_size ~ 1 + c_load,
data = df_pupil,
family = gaussian (),
prior = c(
prior(normal(1000, 500), class=Intercept),
prior(normal(0, 1000), class=sigma),
prior(normal(0, 100), class=b, coef=c_load)
))
plot(fit_pupil)
# provides a table with confidence intervals for all the params:
library(rstanarm) # rstanarm not installable here
short_summary(fit_pupil)
# centering data round mean of trail_id (here only called trial)
library(bcogsci)
data("df_spacebar")
df_spacebar <- df_spacebar %>% mutate(c_trial = trial - mean(trial))
df_spacebar
# modifying a the rt column, so that's all 1s (because we want to priors to depend on only the model, not the data this time)
df_spacebar_ref <- df_spacebar %>% mutate(rt = rep(1, n()))
df_spacebar_ref # dummy dataset
# fitting model
library(brms)
fit_prior_press_trail <- brm(rt ~ 1 + c_trial,
data = df_spacebar_ref,
family = lognormal (),
prior = c(
prior(normal(6, 1.5), class=Intercept),
prior(normal(0, 1), class=sigma),
prior(normal(0, 1), class=b, coef=c_trial)
),
sample_prior='only', # ignores any data from df_spacebar_ref
control=list(adapt_delta = 0.9)
)
median_diff <- function(x){median(x-lag(x), na.rm=TRUE)}
library(ggplot2) # for method "coord_cartesian"
pp_check(fit_prior_press_trail,
type="stat",
stat="median_diff",
prefix="ppd", # show only prior predictive distributions
binwidth=500) +
coord_cartesian(ylim=c(0,50)) + theme_bw() # binwidth and cut top of plot
# refitting model
fit_prior_press_trail <- brm(rt ~ 1 + c_trial,
data = df_spacebar_ref,
family = lognormal (),
prior = c(
prior(normal(6, 1.5), class=Intercept),
prior(normal(0, 1), class=sigma),
prior(normal(0, .01), class=b, coef=c_trial)
),
sample_prior='only', # ignores any data from df_spacebar_ref
control=list(adapt_delta = 0.9)
)
# fitting model on new data
fit_press_trail <- brm(rt ~ 1 + c_trial,
data = df_spacebar,
family = lognormal(),
prior = c(
prior(normal(6, 1.5), class=Intercept),
prior(normal(0, 1), class=sigma),
prior(normal(0, .01), class=b, coef=c_trial)
)
)
# plotting results
plot(fit_press_trail)
# plotting results
plot(fit_press_trail)
# extracting samples for the params from the model
alpha_sampes <- ad_draws_df(fit_press_trail)&b_Intercept
alpha_sampes
# extracting samples for the params from the model
alpha_sampes <- ad_draws_df(fit_press_trail)&b_Intercept
# extracting samples for the params from the model
alpha_sampes <- as_draws_df(fit_press_trail)&b_Intercept
# extracting samples for the params from the model
alpha_sampes <- as_draws_df(fit_press_trail)$b_Intercept
alpha_sampes
beta_sampes <- as_draws_df(fit_press_trail)$b_c_trail
beta_sampes
beta_sampes <- as_draws_df(fit_press_trail)$b_c_trial
beta_sampes
beta_ms <- exp(alpha_sampes) - exp(alpha_sampes - beta_sampes)
beta_ms
beta_msmean <- round(mean(beta_ms),5)
beta_msmean
beta_mslow <- round(quantile(beta_ms, prob = 0.025), 5)
beta_mslow
beta_mshigh
beta_mshigh
beta_mshigh <- round(quantile(beta_ms, prob = 0.975), 5)
beta_mshigh
c(beta_msmean, beta_mslow, beta_mshigh)
# extracting samples for the params from the model
alpha_samples <- as_draws_df(fit_press_trail)$b_Intercept
alpha_samples
beta_samples <- as_draws_df(fit_press_trail)$b_c_trial
beta_samples
# casting back to ms scale
beta_ms <- exp(alpha_samples) - exp(alpha_samples - beta_samples)
beta_ms # a represents the mean and b the change in reaction time
beta_msmean <- round(mean(beta_ms),5)
beta_msmean
beta_mslow <- round(quantile(beta_ms, prob = 0.025), 5)
beta_mslow
beta_mshigh <- round(quantile(beta_ms, prob = 0.975), 5)
beta_mshigh
c(beta_msmean, beta_mslow, beta_mshigh)
# show slowdown after 100 trials from the middle of the experiment
effect_100 <- exp(alpha_sampes + 100 * beta_sampes)
# show slowdown after 100 trials from the middle of the experiment
effect_100 <- exp(alpha_samples + 100 * beta_samples)
effect_100
c(mean = mean(effect_100)), quantile(effect_100, c(.025, .975))
c(mean = mean(effect_100), quantile(effect_100, c(.025, .975))
c(mean = mean(effect_100),
quantile(effect_100, c(.025, .975)))
c(mean = mean(effect_100), quantile(effect_100, c(.025, .975)))
# casting back to ms scale
beta_ms <- exp(alpha_samples) - exp(alpha_samples - beta_samples)
beta_ms # a represents the mean and b the change in reaction time
beta_msmean <- round(mean(beta_ms),5)
beta_msmean
beta_mslow <- round(quantile(beta_ms, prob = 0.025), 5)
beta_mslow
beta_mshigh <- round(quantile(beta_ms, prob = 0.975), 5)
beta_mshigh
c(beta_msmean, beta_mslow, beta_mshigh)
# show slowdown after 100 trials from the middle of the experiment
effect_100 <- exp(alpha_samples + 100 * beta_samples)
effect_100
c(mean = mean(effect_100), quantile(effect_100, c(.025, .975)))
# show slowdown after 100 trials from the middle of the experiment
effect_100 <- exp(alpha_samples + 100 * beta_samples)
effect_100
c(mean = mean(effect_100), quantile(effect_100, c(.025, .975)))
# fitting model on new data
fit_press_trail <- brm(rt ~ 1 + c_trial,
data = df_spacebar,
family = lognormal(),
prior = c(
prior(normal(6, 1.5), class=Intercept),
prior(normal(0, 1), class=sigma),
prior(normal(0, .01), class=b, coef=c_trial)
)
)
# show slowdown after 100 trials from the middle of the experiment
effect_100 <- exp(alpha_samples + 100 * beta_samples) - exp(alpha_samples)
effect_100
c(mean = mean(effect_100), quantile(effect_100, c(.025, .975)))
# Example 3: logistic regression
data('df_recall')
head(dfrecall)
head(df_recall)
df_recall <- df_recall %>% mutate(c_set_size = set_size - mean(set_size))
df_recall
# exampining which set sizes we have
df_recall$set_size %>% unique() %>% sort()
x <- seq(0.001, 0.999, by=0.001) # making a line
y <- log(x/(1-x)) # log-odds-formula
logistic_dat <- data.frame(theta=x, eta=y)
logistic_dat
p1 <- qplot(logistic_dat$theta, logistic_dat$eta, geom='line') +
xlab(expression(theta)) +
ylab(expression(eta)) +
ggtitle("The logit link") +
annotate('text',
x=0.3, y=4,
label = expression(paste(eta, '=', g(theta))), parse=TRUE,
size=8)
p1 <- qplot(logistic_dat$theta, logistic_dat$eta, geom='line') +
xlab(expression(theta)) +
ylab(expression(eta)) +
ggtitle("The logit link") +
annotate('text',
x=0.3, y=4,
label = expression(paste(eta, '=', g(theta))), parse=TRUE,
size=8)
p1
# modeling the effect of set_size on the log-odds of theta:
fit_recall <- brm(correct ~ 1 + c_set_size,
data = de_recall,
family = bernoulli(link=logit),
prior = c(
prior(normal(0, 1.5), class=Intercept),
prior(normal(0, .1), class=b, coef=c_trial)
)
)
# modeling the effect of set_size on the log-odds of theta:
fit_recall <- brm(correct ~ 1 + c_set_size,
data = df_recall,
family = bernoulli(link=logit),
prior = c(
prior(normal(0, 1.5), class=Intercept),
prior(normal(0, .1), class=b, coef=c_trial)
)
)
# modeling the effect of set_size on the log-odds of theta:
fit_recall <- brm(correct ~ 1 + c_set_size,
data = df_recall,
family = bernoulli(link=logit),
prior = c(
prior(normal(0, 1.5), class=Intercept),
prior(normal(0, .1), class=b, coef=c_set_size)
)
)
# plotting results
posterior_summary(fit_recall, variable=c("b_Intercept", "b_c_set_size"))
# plotting results
plot(fit_recall)
# transorming back to interpretable scales
alpha_samples <- as_draws_df(fit_recall)$b_Intercept
beta_samples <- as_draws_df(fit_recall)$b_c_set_size
beta_mean <- round(mean(beta_samples), 5)
beta_mean
beta_low <- round(quantile(beta_ms, prob = 0.025), 5)
beta_low
beta_low <- round(quantile(beta_samples, prob = 0.025), 5)
beta_low
beta_high <- round(quantile(beta_samples, prob = 0.975), 5)
beta_high
av_accuracy <- plogis(alpha_samples)
av_accuracy
c(mean=mean(av_accuracy)
c(mean=mean(av_accuracy))
c(mean=mean(av_accuracy), quantile(av_accuracy, c(.025, .975)))
# fitting model on new data
fit_press_trail <- brm(rt ~ c_trial,
data = df_spacebar,
family = lognormal(),
prior = c(
prior(normal(6, 1.5), class=Intercept),
prior(normal(0, 1), class=sigma),
prior(normal(0, .01), class=b, coef=c_trial)
)
)
# plotting results
plot(fit_press_trail) # it's still on the log scale though, so for interpretability we need to transform back
# fitting model on new data
fit_press_trail <- brm(rt ~ 0 + c_trial,
data = df_spacebar,
family = lognormal(),
prior = c(
prior(normal(6, 1.5), class=Intercept),
prior(normal(0, 1), class=sigma),
prior(normal(0, .01), class=b, coef=c_trial)
)
)
# plotting results
plot(fit_press_trail) # it's still on the log scale though, so for interpretability we need to transform back
# fitting model on new data
fit_press_trail <- brm(rt ~ 0 + c_trial,
data = df_spacebar,
family = lognormal(),
prior = c(
prior(normal(6, 1.5), class=Intercept),
prior(normal(0, 1), class=sigma),
prior(normal(0, .01), class=b, coef=c_trial)
)
)
# fitting model on new data
fit_press_trail <- brm(rt ~ 1 + c_trial,
data = df_spacebar,
family = lognormal(),
prior = c(
prior(normal(6, 1.5), class=Intercept),
prior(normal(0, 1), class=sigma),
prior(normal(0, .01), class=b, coef=c_trial)
)
)
exp(0.01824)
exp(6.327191)
# so we extract from the mean of the reaction times the difference in reaction times between the mean and one trial
exp(0.01824)
plogis(0.47207)
plogis(-0.06153)
# Question: Compute the probability of obtaining a value between 1 and 5 in a normal distribution with mean 4 and standard deviation 3.
pnorm(5, mean=4, sd=3)
# Question: Compute the probability of obtaining a value between 1 and 5 in a normal distribution with mean 4 and standard deviation 3.
pnorm(5, mean=4, sd=3) - pnorm(1, mean=4, sd=3)
# Question: Compute the probability of obtaining a value between 1 and 1.5 in a normal distribution with mean 1 and standard deviation 0.5.
pnorm(1.5, mean=1, sd=0.5) - pnorm(1, mean=1, sd=0.5)
# Question: Consider participating in a lottery ten times. Each time, the probability of winning a prize is 0.10.
# What is the probability of winning exactly 3 times?
dbinom(0:10, size=10, prob=0.1)[3]
# Question: Suppose we want to define a prior on the number of words a person types per day
# (here, we assume that everyone types at least some words a day, not 0).
# Which prior DOES NOT strongly violate common sense assumptions? Only one answer is correct.
# Uniform(0, 6000)
# Normal(0, 12000)
# Normal(3000, 3000)
# Normal+(5000, 20000)
answer <- 'Normal+(5000, 20000)'
answer
exp(0.032)
exp(0.032/2)
exp(0.032/2)
exp(0.032)
exp(0.032*2)
exp(6.658)
exp(6.658/2)
exp(6.658)
exp(0.032)
exp(0.032*2)
exp(0.032/2)
exp(0.032+0.5)
exp(0.032-0.5)
exp(0.032+0.5)
plogis(.35)
plogis(.35)*2
plogis(.35)*2-1
plogis(.35)*2
plogis(.35)
c(mean=mean(asd), quantile(asd, c(.5, .975)))
asd <- plogis(.35)
c(mean=mean(asd), quantile(asd, c(.5, .975)))
asd <- plogis(-0.39)
asd
exp(0.032)
beta_ms <- exp(6.658) - exp(6.658 - 0.032)
beta_ms # a represents the mean and b the change in reaction time
beta_ms <- exp(6.658 - 0.032) - exp(6.658)
beta_ms <- exp(6.658 - 0.032) - exp(6.658)
beta_ms # a represents the mean and b the change in reaction time
